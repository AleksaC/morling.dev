<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gunnar Morling</title>
    <link>https://www.morling.dev/</link>
    <description>Recent content on Gunnar Morling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2020 Gunnar Morling</copyright>
    <lastBuildDate>Wed, 14 Oct 2020 17:45:00 +0200</lastBuildDate>
    
	<atom:link href="https://www.morling.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Class Unloading in Layered Java Applications</title>
      <link>https://www.morling.dev/blog/class-unloading-in-layered-java-applications/</link>
      <pubDate>Wed, 14 Oct 2020 17:45:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/class-unloading-in-layered-java-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Layers are sort of the secret sauce of the Java platform module system (JPMS):
by providing fine-grained control over how individual JPMS modules and their classes are loaded by the JVM,
they enable advanced usages like loading multiple versions of a given module, or dynamically adding and removing modules at application runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/&#34;&gt;Layrry&lt;/a&gt; API and launcher provides a small plug-in API based on top of layers,
which for instance can be used to dynamically add plug-ins contributing new views and widgets to a running JavaFX application.
If such plug-in gets removed from the application again,
all its classes need to be unloaded by the JVM, avoiding an ever-increasing memory consumption if for instance a plug-in gets updated multiple times.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this blog post I&amp;#8217;m going to explore how to ensure classes from removed plug-in layers are unloaded in a timely manner,
and how to find the culprit in case some class fails to be unloaded.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Building hsdis for OpenJDK 15</title>
      <link>https://www.morling.dev/blog/building-hsdis-for-openjdk-15/</link>
      <pubDate>Mon, 05 Oct 2020 20:30:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/building-hsdis-for-openjdk-15/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Lately I&amp;#8217;ve been fascinated by the possibility to analyse the assembly code emitted by the Java JIT (just-in-time) compiler.
So far I had only looked only into Java class files using &lt;em&gt;javap&lt;/em&gt;;
diving into the world of assembly code feels a bit like Alice must have felt when falling down the rabbit whole into wonderland.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Introducing JmFrX: A Bridge From JMX to JDK Flight Recorder</title>
      <link>https://www.morling.dev/blog/introducing-jmfrx-a-bridge-from-jmx-to-jdk-flight-recorder/</link>
      <pubDate>Tue, 18 Aug 2020 17:30:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/introducing-jmfrx-a-bridge-from-jmx-to-jdk-flight-recorder/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;I&amp;#8217;m excited to share the news about an open-source utility I&amp;#8217;ve been working on lately:
&lt;a href=&#34;https://github.com/gunnarmorling/jmfrx&#34;&gt;JmFrX&lt;/a&gt;,
a tool for capturing JMX data with JDK Flight Recorder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When using JMX (&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Management_Extensions&#34;&gt;Java Management Extensions&lt;/a&gt;), The Java platform&amp;#8217;s standard for monitoring and managing applications,
JmFrX allows you to periodically record the attributes from any JMX MBean into &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) files,
which you then can analyse using &lt;a href=&#34;https://openjdk.java.net/projects/jmc/&#34;&gt;JDK Mission Control&lt;/a&gt; (JMC).&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>How I Built a Serverless Search for My Blog</title>
      <link>https://www.morling.dev/blog/how-i-built-a-serverless-search-for-my-blog/</link>
      <pubDate>Wed, 29 Jul 2020 17:30:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/how-i-built-a-serverless-search-for-my-blog/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;&lt;em&gt;I have built a custom search functionality for this blog,
based on Java and the Apache Lucene full-text search library,
compiled into a native binary using the Quarkus framework and GraalVM.
It is deployed as a Serverless application running on AWS Lambda,
providing search results without any significant cold start delay.
If you thought Java wouldn&amp;#8217;t be the right language for this job, keep reading;
in this post I&amp;#8217;m going to give an overview over the implementation of this feature and my learnings along the way.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Building Class Data Sharing Archives with Apache Maven</title>
      <link>https://www.morling.dev/blog/building-class-data-sharing-archives-with-apache-maven/</link>
      <pubDate>Thu, 11 Jun 2020 17:30:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/building-class-data-sharing-archives-with-apache-maven/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Ahead-of-time compilation (AOT) is &lt;em&gt;the&lt;/em&gt; big topic in the Java ecosystem lately:
by compiling Java code to native binaries, developers and users benefit from vastly improved start-up times and reduced memory usage.
The &lt;a href=&#34;https://www.graalvm.org/&#34;&gt;GraalVM&lt;/a&gt; project made huge progress towards AOT-compiled Java applications,
and &lt;a href=&#34;https://mail.openjdk.java.net/pipermail/discuss/2020-April/005429.html&#34;&gt;Project Leyden&lt;/a&gt; promises to standardize AOT in a future version of the Java platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;This makes it easy to miss out on significant performance improvements which have been made on the JVM in recent Java versions,
in particular when it comes to &lt;a href=&#34;https://cl4es.github.io/2019/11/20/OpenJDK-Startup-Update.html&#34;&gt;faster start-up times&lt;/a&gt;.
Besides a range of improvements related to class loading, linking and bytecode verification,
substantial work has been done around &lt;a href=&#34;https://docs.oracle.com/en/java/javase/14/vm/class-data-sharing.html&#34;&gt;class data sharing&lt;/a&gt; (CDS).
Faster start-ups are beneficial in many ways:
shorter turnaround times during development,
quicker time-to-first-response for users in coldstart scenarios,
cost savings when billed by CPU time in the cloud.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;With CDS, class metadata is persisted in an archive file,
which during subsequent application starts is mapped into memory.
This is faster than loading the actual class files, resulting in reduced start-up times.
When starting multiple JVM processes on the same host, read-only archives of class metadata can also be shared between the VMs, so that less memory is consumed overall.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Single Message Transformations - The Swiss Army Knife of Kafka Connect</title>
      <link>https://www.morling.dev/blog/single-message-transforms-swiss-army-knife-of-kafka-connect/</link>
      <pubDate>Thu, 14 May 2020 15:30:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/single-message-transforms-swiss-army-knife-of-kafka-connect/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Do you remember Angus &#34;Mac&#34; MacGyver?
The always creative protagonist of the popular 80ies/90ies TV show, who could solve about any problem with nothing more than a Swiss Army knife, duct tape, shoe strings and a paper clip?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The single message transformations (SMTs) of Kafka Connect are almost as versatile as MacGyver&amp;#8217;s Swiss Army knife:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;ulist&#34;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to change the timezone or format of date/time message fields?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to change the topic a specific message gets sent to?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to filter out specific records?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;SMTs can be the answer to these and many other questions that come up in the context of Kafka Connect.
Applied to source or sink connectors,
SMTs allow to modify Kafka records before they are sent to Kafka, or after they are consumed from a topic, respectively.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>The Emitter Parameter Pattern for Flexible SPI Contracts</title>
      <link>https://www.morling.dev/blog/emitter-parameter-pattern-for-flexible-spis/</link>
      <pubDate>Mon, 04 May 2020 17:30:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/emitter-parameter-pattern-for-flexible-spis/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;For libraries and frameworks it&amp;#8217;s a common requirement to make specific aspects customizeable via &lt;a href=&#34;https://en.wikipedia.org/wiki/Service_provider_interface&#34;&gt;service provider interfaces&lt;/a&gt; (SPIs):
contracts to be implemented by the application developer, which then are invoked by framework code,
adding new or replacing existing functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Often times, the method implementations of such an SPI need to return value(s) to the framework.
An alternative to return values are &#34;emitter parameters&#34;:
passed by the framework to the SPI method, they offer an &lt;em&gt;API&lt;/em&gt; for receiving value(s) via method calls.
Certainly not revolutionary or even a new idea,
I find myself using emitter parameters more and more in libraries and frameworks I work on.
Hence I&amp;#8217;d like to discuss some advantages I perceive about the emitter parameter pattern.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Plug-in Architectures With Layrry and the Java Module System</title>
      <link>https://www.morling.dev/blog/plugin-architectures-with-layrry-and-the-java-module-system/</link>
      <pubDate>Tue, 21 Apr 2020 18:54:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/plugin-architectures-with-layrry-and-the-java-module-system/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Making applications extensible with some form of plug-ins is a very common pattern in software design:
based on well-defined APIs provided by the application core, plug-ins can customize an application&amp;#8217;s behavior and provide new functionality.
Examples include desktop applications like IDEs or web browsers, build tools such as Apache Maven or Gradle, as well as server-side applications such as Apache Kafka Connect,
a runtime for Kafka connectors plug-ins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post I&amp;#8217;m going to explore how the &lt;a href=&#34;https://www.jcp.org/en/jsr/detail?id=376&#34;&gt;Java Platform Module System&lt;/a&gt;&#39;s notion of module layers can be leveraged for implementing plug-in architectures on the JVM.
We&amp;#8217;ll also discuss how &lt;a href=&#34;https://github.com/moditect/layrry&#34;&gt;Layrry&lt;/a&gt;, a launcher and runtime for layered Java applications, can help with this task.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Introducing Layrry: A Launcher and API for Modularized Java Applications</title>
      <link>https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/</link>
      <pubDate>Sun, 29 Mar 2020 21:31:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the biggest changes in recent Java versions has been the introduction of the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/spec/&#34;&gt;module system&lt;/a&gt; in Java 9.
It allows to organize Java applications and their dependencies in strongly encapsulated modules, utilizing explicit and well-defined module APIs and relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post I&amp;#8217;m going to introduce the &lt;a href=&#34;https://github.com/moditect/layrry&#34;&gt;Layrry&lt;/a&gt; open-source project, a launcher and Java API for executing modularized Java applications.
Layrry helps Java developers to assemble modularized applications from dependencies using their Maven coordinates and execute them using module layers.
Layers go beyond the capabilities of the &#34;flat&#34; module path specified via the &lt;em&gt;--module-path&lt;/em&gt; parameter of the &lt;em&gt;java&lt;/em&gt; command,
e.g. allowing to use multiple versions of one module within one and the same application.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Reworking Git Branches with git filter-branch</title>
      <link>https://www.morling.dev/blog/reworking-git-branches-with-git-filter-branch/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:10 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/reworking-git-branches-with-git-filter-branch/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Within &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt;, the project I&amp;#8217;m working on at Red Hat, we recently encountered an &#34;interesting&#34; situation where we had to resolve a rather difficult merge conflict.
As others where interested in how we addressed the issue, and also for our own future reference,
I&amp;#8217;m going to give a quick run down of the problem we encountered and how we solved it.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Monitoring REST APIs with Custom JDK Flight Recorder Events</title>
      <link>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</link>
      <pubDate>Wed, 29 Jan 2020 15:30:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) is an invaluable tool for gaining deep insights into the performance characteristics of Java applications.
Open-sourced in JDK 11, JFR provides a low-overhead framework for collecting events from Java applications, the JVM and the operating system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this blog post we&amp;#8217;re going to explore how custom, application-specific JFR events can be used to monitor a REST API, allowing to track request counts, identify long-running requests and more.
We&amp;#8217;ll also discuss how the JFR &lt;a href=&#34;https://openjdk.java.net/jeps/349&#34;&gt;Event Streaming API&lt;/a&gt; new in Java 14 can be used to export live events,
making them available for monitoring and alerting via tools such as Prometheus and Grafana.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Enforcing Java Record Invariants With Bean Validation</title>
      <link>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</link>
      <pubDate>Mon, 20 Jan 2020 17:30:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</guid>
      <description>Record types are one of the most awaited features in Java 14; they promise to &#34;provide a compact syntax for declaring classes which are transparent holders for shallowly immutable data&#34;. One example where records should be beneficial are data transfer objects (DTOs), as e.g. found in the remoting layer of enterprise applications. Typically, certain rules should be applied to the attributes of such DTO, e.g. in terms of allowed values. The goal of this blog post is to explore how such invariants can be enforced on record types, using annotation-based constraints as provided by the Bean Validation API.</description>
    </item>
    
    <item>
      <title>Using Java 13 Text Blocks (Only) for Your Tests</title>
      <link>https://www.morling.dev/blog/using-java-13-text-blocks-for-tests/</link>
      <pubDate>Mon, 13 Jan 2020 17:30:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/using-java-13-text-blocks-for-tests/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When Java 9 was introduced in 2017,
it was the last major version published under the old release scheme.
Since then, a &lt;a href=&#34;https://www.infoq.com/news/2017/09/Java6Month/&#34;&gt;six month release cadence&lt;/a&gt; has been adopted.
This means developers don&amp;#8217;t have to wait years for new APIs and language features,
but they can get their hands onto the latest additions twice a year.
In this post I&amp;#8217;d like to describe how you can try out new language features such as &lt;a href=&#34;http://openjdk.java.net/jeps/355&#34;&gt;Java 13 text blocks&lt;/a&gt; in the test code of your project,
while keeping your main code still compatible with older Java versions.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Quarkus Qute â A Test Ride</title>
      <link>https://www.morling.dev/blog/quarkus-qute-test-ride/</link>
      <pubDate>Fri, 03 Jan 2020 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/quarkus-qute-test-ride/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the long-awaited features in Quarkus was support for server-side templating:
until recently, Quarkus supported only client-side web frameworks which obtain there data by calling a REST API on the backend.
This has changed with &lt;a href=&#34;https://quarkus.io/blog/quarkus-1-1-0-final-released/&#34;&gt;Quarkus 1.1&lt;/a&gt;: it comes with a brand-new template engine named &lt;a href=&#34;https://quarkus.io/guides/qute&#34;&gt;Qute&lt;/a&gt;,
which allows to build web applications using server-side templates.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Automatically Deploying a Hugo Website via GitHub Actions</title>
      <link>https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a software engineer, I like to automate tedious tasks as much as possible.
The deployment of this website is no exception:
it is built using the &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site generator and hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;;
so wouldn&amp;#8217;t it be nice if the rendered website would automatically be published whenever an update is pushed to its source code repository?&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Conferences</title>
      <link>https://www.morling.dev/conferences/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/conferences/</guid>
      <description>This page gives an overview over some talks I have done over the last years. I have spoken at large conferences such as QCon San Francisco, Devoxx and JavaOne, local meet-ups as well as company-internal events, covering topics such as Debezium and Change Data Capture, Bean Validation, NoSQL and more.
 If you&amp;#8217;d like me to have as a speaker at your conference or meet-up, please get in touch.
 Upcoming   QCon SÃ£o Paulo (postponed due to COVID-19): Practical Change Data Streaming Use Cases with Apache Kafka and Debezium</description>
    </item>
    
    <item>
      <title>Podcasts and Interviews</title>
      <link>https://www.morling.dev/podcasts/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/podcasts/</guid>
      <description>I had the pleasure to do a few podcasts and interviews, mostly around Debezium and change data capture.
   The InfoQ Podcast, with Wes Reisz: Gunnar Morling on Change Data Capture and Debezium
  Data Engineering Podcast by Tobias Macey: Episode 114&amp;#8201;&amp;#8212;&amp;#8201;Change Data Capture For All Of Your Databases With Debezium; together with Randall Hauch
  Adam Bien&amp;#8217;s airhacks.fm podcast: Episode 39&amp;#8201;&amp;#8212;&amp;#8201;Use the Most Productive Stack You Can Get</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://www.morling.dev/projects/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/projects/</guid>
      <description>I have contributed to a wide range of open-source projects over the last years. Here&amp;#8217;s a selection of projects I have been involved with.
  Debezium  Debezium is a platform for change data capture; it lets you stream changes out of different databases such as Postgres, MySQL, MongoDB and SQL Server into Apache Kafka. I am the current lead of the Debezium project.
 Quarkus  Quarkus is a &#34;</description>
    </item>
    
    <item>
      <title>Time for a New Blog</title>
      <link>https://www.morling.dev/blog/time-for-new-blog/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/time-for-new-blog/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It has been quite a while since the last post on my old &lt;a href=&#34;http://musingsofaprogrammingaddict.blogspot.com/&#34;&gt;personal blog&lt;/a&gt;;
since then, I&amp;#8217;ve mostly focused on writing about my day-work on the &lt;a href=&#34;https://debezium.io/blog/&#34;&gt;Debezium blog&lt;/a&gt; as well as &lt;a href=&#34;https://in.relation.to/gunnar-morling/&#34;&gt;some posts&lt;/a&gt; about more general technical topics on the Hibernate team blog.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://www.morling.dev/about/</link>
      <pubDate>Wed, 25 Dec 2019 10:58:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/about/</guid>
      <description>I am an open-source software engineer, currently working for Red Hat, where I am leading the Debezium project, a platform for change data capture.
 I have been a long-time committer to multiple open-source projects, including Hibernate, MapStruct and Deptective; I also serve as the spec lead for Bean Validation 2.0 (first at the JCP, now under the Jakarta EE umbrella at the Eclipse Foundation).
 Named a Java Champion, I&amp;#8217;m regularly speaking at conferences such as QCon, JavaOne, Red Hat Summit, JavaZone, JavaLand and Kafka Summit.</description>
    </item>
    
  </channel>
</rss>