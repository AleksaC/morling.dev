<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>morling.dev -- Blog</title>
    <link>https://www.morling.dev/blog/</link>
    <description>Recent content in Blogs on Gunnar Morling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 Gunnar Morling</copyright>
    <lastBuildDate>Sun, 29 Mar 2020 21:31:00 +0200</lastBuildDate>
    
	<atom:link href="https://www.morling.dev/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducing Layrry: A Launcher and API for Modularized Java Applications</title>
      <link>https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/</link>
      <pubDate>Sun, 29 Mar 2020 21:31:00 +0200</pubDate>
      
      <guid>https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the biggest changes in recent Java versions has been the introduction of the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/spec/&#34;&gt;module system&lt;/a&gt; in Java 9.
It allows to organize Java applications and their dependencies in strongly encapsulated modules, utilizing explicit and well-defined module APIs and relationships.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this post I&amp;#8217;m going to introduce the &lt;a href=&#34;https://github.com/moditect/layrry&#34;&gt;Layrry&lt;/a&gt; open-source project, a launcher and Java API for executing modularized Java applications.
Layrry helps Java developers to assemble modularized applications from dependencies using their Maven coordinates and execute them using module layers.
Layers go beyond the capabilities of the &#34;flat&#34; module path specified via the &lt;em&gt;--module-path&lt;/em&gt; parameter of the &lt;em&gt;java&lt;/em&gt; command,
e.g. allowing to use multiple versions of one module within one and the same application.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Reworking Git Branches with git filter-branch</title>
      <link>https://www.morling.dev/blog/reworking-git-branches-with-git-filter-branch/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:10 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/reworking-git-branches-with-git-filter-branch/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;Within &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt;, the project I&amp;#8217;m working on at Red Hat, we recently encountered an &#34;interesting&#34; situation where we had to resolve a rather difficult merge conflict.
As others where interested in how we addressed the issue, and also for our own future reference,
I&amp;#8217;m going to give a quick run down of the problem we encountered and how we solved it.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Monitoring REST APIs with Custom JDK Flight Recorder Events</title>
      <link>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</link>
      <pubDate>Wed, 29 Jan 2020 15:30:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;The &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) is an invaluable tool for gaining deep insights into the performance characteristics of Java applications.
Open-sourced in JDK 11, JFR provides a low-overhead framework for collecting events from Java applications, the JVM and the operating system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;In this blog post we&amp;#8217;re going to explore how custom, application-specific JFR events can be used to monitor a REST API, allowing to track request counts, identify long-running requests and more.
We&amp;#8217;ll also discuss how the JFR &lt;a href=&#34;https://openjdk.java.net/jeps/349&#34;&gt;Event Streaming API&lt;/a&gt; new in Java 14 can be used to export live events,
making them available for monitoring and alerting via tools such as Prometheus and Grafana.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Enforcing Java Record Invariants With Bean Validation</title>
      <link>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</link>
      <pubDate>Mon, 20 Jan 2020 17:30:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</guid>
      <description>Record types are one of the most awaited features in Java 14; they promise to &#34;provide a compact syntax for declaring classes which are transparent holders for shallowly immutable data&#34;. One example where records should be beneficial are data transfer objects (DTOs), as e.g. found in the remoting layer of enterprise applications. Typically, certain rules should be applied to the attributes of such DTO, e.g. in terms of allowed values. The goal of this blog post is to explore how such invariants can be enforced on record types, using annotation-based constraints as provided by the Bean Validation API.</description>
    </item>
    
    <item>
      <title>Using Java 13 Text Blocks (Only) for Your Tests</title>
      <link>https://www.morling.dev/blog/using-java-13-text-blocks-for-tests/</link>
      <pubDate>Mon, 13 Jan 2020 17:30:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/using-java-13-text-blocks-for-tests/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;When Java 9 was introduced in 2017,
it was the last major version published under the old release scheme.
Since then, a &lt;a href=&#34;https://www.infoq.com/news/2017/09/Java6Month/&#34;&gt;six month release cadence&lt;/a&gt; has been adopted.
This means developers don&amp;#8217;t have to wait years for new APIs and language features,
but they can get their hands onto the latest additions twice a year.
In this post I&amp;#8217;d like to describe how you can try out new language features such as &lt;a href=&#34;http://openjdk.java.net/jeps/355&#34;&gt;Java 13 text blocks&lt;/a&gt; in the test code of your project,
while keeping your main code still compatible with older Java versions.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Quarkus Qute – A Test Ride</title>
      <link>https://www.morling.dev/blog/quarkus-qute-test-ride/</link>
      <pubDate>Fri, 03 Jan 2020 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/quarkus-qute-test-ride/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;One of the long-awaited features in Quarkus was support for server-side templating:
until recently, Quarkus supported only client-side web frameworks which obtain there data by calling a REST API on the backend.
This has changed with &lt;a href=&#34;https://quarkus.io/blog/quarkus-1-1-0-final-released/&#34;&gt;Quarkus 1.1&lt;/a&gt;: it comes with a brand-new template engine named &lt;a href=&#34;https://quarkus.io/guides/qute&#34;&gt;Qute&lt;/a&gt;,
which allows to build web applications using server-side templates.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Automatically Deploying a Hugo Website via GitHub Actions</title>
      <link>https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;As a software engineer, I like to automate tedious tasks as much as possible.
The deployment of this website is no exception:
it is built using the &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site generator and hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;;
so wouldn&amp;#8217;t it be nice if the rendered website would automatically be published whenever an update is pushed to its source code repository?&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Time for a New Blog</title>
      <link>https://www.morling.dev/blog/time-for-new-blog/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      
      <guid>https://www.morling.dev/blog/time-for-new-blog/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;
&lt;p&gt;It has been quite a while since the last post on my old &lt;a href=&#34;http://musingsofaprogrammingaddict.blogspot.com/&#34;&gt;personal blog&lt;/a&gt;;
since then, I&amp;#8217;ve mostly focused on writing about my day-work on the &lt;a href=&#34;https://debezium.io/blog/&#34;&gt;Debezium blog&lt;/a&gt; as well as &lt;a href=&#34;https://in.relation.to/gunnar-morling/&#34;&gt;some posts&lt;/a&gt; about more general technical topics on the Hibernate team blog.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
